Join:
	id: join
	name: "join"

	MDBoxLayout:
		orientation: 'vertical'
		padding: dp(5), dp(5), dp(5), dp(5)
		md_bg_color: (.8, 0, 0, .87)

		MDGridLayout:
			cols: 2
			size_hint: (1, .2)

			MDFloatingActionButton:
				icon: 'arrow-left-bold-circle'
				elevation: 0
				md_bg_color: (.83, 0, 0, .87)
				on_press: app.root.current = 'home'

			MDGridLayout:
				cols: 1
				MDLabel:
					text: "[b][color=#FFFFFF]Registrate[/color][/b]"
					markup: True
					halign: 'left'
					font_size: dp(28)

				MDLabel:
					text: "[color=#FFFFFF]Es rapido y facil[/color]"
					markup: True
					halign: 'left'
					font_size: 16
		
		MDFloatLayout:
			cols: 1
			#spacing: dp(15)
			#padding: dp(0), dp(40), dp(0), dp(0)
			
			MDTextField:
				id: username
				name: 'username'
				

				text: 'mike'
				hint_text: "Nombre de Usuario"
				current_hint_text_color: (1, 1, 1, 1)
				pos_hint: {'center_x': .5, 'center_y': .8}
				size_hint: .9, .2
				theme_text_color: 'Custom'
				text_color: (1, 1, 1, 1)
				line_color_normal: (0, 0, 0, 0)
				line_color_focus: (0, 0, 0, 0)
				multiline: False
				on_focus: 
					if username.focus == True or (username.focus == False and username.text != ''):\
					username.hint_text = ''
					else:\
					username.hint_text = 'Cuenta de Etherum'
				
				canvas.after:
					Color:
						rgba: (1, 1, 1, 1)
					
					Line:
						rounded_rectangle: (self.pos[0]/2-5, self.pos[1]+5, root.size[0]*.95, self.size[1], 20, 20, 20, 20, 100)
						width: 1.5

			MDTextField:
				id: metamask
				name: 'metamask'

				text: 'mike'
				hint_text: "Cuenta (Metamask)"
				current_hint_text_color: (1, 1, 1, 1)
				pos_hint: {'center_x': .5, 'center_y': .58}
				size_hint: .9, .2
				theme_text_color: 'Custom'
				text_color: (1, 1, 1, 1)
				line_color_normal: (0, 0, 0, 0)
				line_color_focus: (0, 0, 0, 0)
				multiline: False
				on_focus: 
					if metamask.focus == True or (metamask.focus == False and metamask.text != ''):\
					metamask.hint_text = ''
					else:\
					metamask.hint_text = 'Cuenta (Metamask)'
				canvas.after:
					Color:
						rgba: (1, 1, 1, 1)
					
					Line:
						rounded_rectangle: (self.pos[0]/2-5, self.pos[1]+5, root.size[0]*.95, self.size[1], 20, 20, 20, 20, 100)
						width: 1.5

			MDTextField:
				id: password
				name: 'password'

				text: 'mikemike'
				hint_text: "Contraseña de Ethereum"
				current_hint_text_color: (1, 1, 1, 1)
				pos_hint: {'center_x': .5, 'center_y': .36}
				size_hint: .9, .2
				theme_text_color: 'Custom'
				text_color: (1, 1, 1, 1)
				line_color_normal: (0, 0, 0, 0)
				line_color_focus: (0, 0, 0, 0)
				multiline: False
				password: True
				on_focus: 
					if password.focus == True or (password.focus == False and password.text != ''):\
					password.hint_text = ''
					else:\
					password.hint_text = 'Contraseña (Metamask)'
				canvas.after:
					Color:
						rgba: (1, 1, 1, 1)
					
					Line:
						rounded_rectangle: (self.pos[0]/2-5, self.pos[1]+5, root.size[0]*.95, self.size[1], 20, 20, 20, 20, 100)
						width: 1.5
			
			MDTextField:
				id: password2
				name: 'password2'

				text: 'mikemike'
				hint_text: "Contraseña (8 - 27 caracteres)"
				current_hint_text_color: (1, 1, 1, 1)
				pos_hint: {'center_x': .5, 'center_y': .14}
				size_hint: .9, .2
				theme_text_color: 'Custom'
				text_color: (1, 1, 1, 1)
				line_color_normal: (0, 0, 0, 0)
				line_color_focus: (0, 0, 0, 0)
				multiline: False
				password:True
				on_focus: 
					if password2.focus == True or (password2.focus == False and password2.text != ''):\
					password2.hint_text = ''
					else:\
					password2.hint_text = 'Contraseña (8 - 27 caracteres)'

				canvas.after:
					Color:
						rgba: (1, 1, 1, 1)
					
					Line:
						rounded_rectangle: (self.pos[0]/2-5, self.pos[1]+5, root.size[0]*.95, self.size[1], 20, 20, 20, 20, 100)
						width: 1.5
				
		MDFloatLayout:
			cols: 2
			#md_bg_color: (0, 1, 0, 1)
			size_hint: 1, .15
			MDIconButton:
				id: eye
				name: 'eye'

				icon: 'eye-off'
				x: 20
				pos_hint: {'center_y': .87}
				theme_text_color: 'Custom'
				text_color: (1, 1, 1, 1)
				on_press:
					if eye.icon == 'eye-off':\
					eye.icon, password.password, password2.password = 'eye', False, False
					else:\
					eye.icon, password.password, password2.password = 'eye-off', True, True
			
			MDLabel:
				text: 'Mostrar Contraseña'
				x: 60
				pos_hint: {'center_y': .87}
				theme_text_color: 'Custom'
				color: (1, 1, 1, 1)
				halign: 'left'
		
		MDFloatLayout:
			cols: 1
			spacing: dp(5)

			MDTextField:
				id: cert_information
				name: 'cert_information'
				
				hint_text: "Información del Usuario"
				current_hint_text_color: (1, 1, 1, 1)
				line_color_normal: (0, 0, 0, 0)
				line_color_focus: (0, 0, 0, 0)
				theme_text_color: ('Custom')
				text_color: (1, 1, 1, 1)
				font_size: 13.5
				multiline: True
				size_hint: .9, .7
				pos_hint: {'center_x': .5, 'top': 1.05}
				on_focus: 
					if cert_information.focus == True:\
					cert_information.focus = False
					else:\
					root.openDialog(title='Campo Deshabilitado', text='En este campo se mostrara la infromación final (una vez se hayan generado las llaves.')
					
				canvas.after:
					Color:
						rgba: (1, 1, 1, 1)
					
					Line:
						rounded_rectangle: (self.pos[0]/2-5, self.pos[1], root.size[0]*.95, self.size[1], 20, 20, 20, 20, 100)
						width: 1.5

			MDGridLayout:
				id: x
				name: 'x'

				cols: 2
				pos_hint: {'center_x': .5, 'top': .32}
				spacing: dp(10)
				size_hint: 1, .15
				
				MDRaisedButton:
					id: gen_keys
					name: 'gen_keys'

					text: "Generar Claves"
					size_hint: (None, None)
					size: (x.size[0]/2)-dp(5), x.size[1]
					on_press: root.actionListener2()

				MDRaisedButton:
					id: empty
					text: "Vaciar campos"
					size_hint: (None, None)
					size: (x.size[0]/2)-dp(5), x.size[1]
					disabled: True
					on_press: root.empty()

			MDRaisedButton:
				id: save
				name: 'save'

				text: "Guardar"
				pos_hint: {'center_x': .5, 'top': .15}
				size_hint: (None, None)
				size: (x.size[0], x.size[1])
				disabled: True
				on_press: root.save(username.text, metamask.text, password.text, password2.text)
				on_release: app.root.current = "home"